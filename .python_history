import pytest
numpy --version
import numpy
import pytes
import pytest
import pandas
import numpy
import os
print("PYTHONPATH:", os.environ.get('PYTHONPATH'))
print("PATH:", os.environ.get('PATH'))
import numpy
import pandas
import pathlib
BASE_DIR = pathlib.Path().resolve()
BASE_DIR
import os
file_path = os.path.join(BASE_DIR, "addition_15values.xlsx")
file_path
file_path = os.path.join(BASE_DIR, "addition_15values.xlsx")
numbers_tuple = pd.read_excel(io=file_path, index_col=None, header=None)
addition = Addition.create(numbers_tuple)
print(numbers_tuple)
import os
import pandas as pd
file_path = os.path.join(BASE_DIR, "addition_15values.xlsx")
BASE_DIR = os.path.dirname(os.path.realpath(__file__))
import os
import pandas as pd
BASE_DIR = "."
file_path = os.path.join(BASE_DIR, "addition_15values.xlsx")
file_path
numbers_tuple = pd.read_excel(io=file_path, index_col=None, header=None)
import os
import pandas as pd
BASE_DIR = "."
file_path = os.path.join(BASE_DIR, "addition_15values.xlsx")
numbers_tuple = pd.read_excel(io=file_path, index_col=None, header=None)
from calc.calculations.addition import Addition
numbers_tuple
numbers_tuple['result']
numbers_tuple
numbers_tuple['2']
numbers_tuple[2]
numbers_tuple = pd.read_excel(io=file_path, index_col=None, header=["value_1",	"value_2",	"result"])
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"])
numbers_tuple
numbers_tuple['result']
numbers_tuple['result'][0]
numbers_tuple
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float')
numbers_tuple
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float')
numbers_tuple
numbers_tuple['result'][index]
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float')
numbers_tuple
numbers_tuple['result'][index]
numbers_tuple['result'][index]numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float', header=0)
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float', header=0)
numbers_tuple
numbers_tuple['result'][0]
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float', header=None)
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float', header=0)
numbers_tuple
numbers_tuple['result'][3]
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float')
numbers_tuple['result'][0]
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float', header=1)
numbers_tuple
numbers_tuple['result'][0]
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float', header=[1,5])
numbers_tuple = pd.read_excel(io=file_path, index_col=None, dtype='float', header=[1,5])
numbers_tuple
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float')
numbers_tuple
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float', header=None)
import os
import pandas as pd
BASE_DIR = os.path.dirname(os.path.realpath(__file__))
file_path = os.path.join(BASE_DIR, "addition_15values.xlsx")
BASE_DIR = "."
file_path = os.path.join(BASE_DIR, "addition_15values.xlsx")
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float', header=None)
numbers_tuple = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float')
numbers_tuple
df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
import pandas as pd
df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
for index, row in df.iterrows():
    print(row['c1'], row['c2'])
df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
df
print(row['0'])
df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
for i in range(len(df)) : 
  print(df.iloc[i, 0], df.iloc[i, 2])
df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
print row.loc[0,'A']
print (row.loc[0,'A'])
print (row.loc[0])
print (row.loc[0,'c1'])
df = pd.DataFrame({'c1': [10, 11, 12], 'c2': [100, 110, 120]})
print (row.loc[0,'c1'])
for row in df.iterrows():
    print row.loc[0,'c1']
for row in df.iterrows():
    print (row.loc[0,'A'])
import os
BASE_DIR = '.'
file_path = os.path.join(BASE_DIR, "addition_15values.xlsx")
dataframe = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float')
    for index, row in dataframe.iterrows():
        tuple_values = dataframe(row['value_1'], row['value2'])
for index, row in dataframe.iterrows():
    tuple_values = dataframe(row['value_1'], row['value2'])
    print (tuple_values)
for index, row in dataframe.iterrows():
    tuple_values = dataframe(row['value_1'], row['value_2'])
    print (tuple_values)
df = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float')
for index, row in df.iterrows():
    tuple_values = df(row['value_1'], row['value_2'])
    print(tuple_values)
df
items = df.items()
items
for item in items:
    print(item)
for item in items:
    print(item["value_1"])
    print(item["value_2"])
for item in items:
    print(item["value_2"])
for item in items:
    print(item)
items:
items
df = pd.read_excel(io=file_path, index_col=None, names=["value_1",	"value_2",	"result"], dtype='float')
for item in items:
    print(item["value_2"])
items
items = df.items()
for item in items:
    print(item["value_2"])
for item in items:
    import pdb; pdb.set_trace()
    item
item
c
q
for item in items:
    item
for x in df.iterrows():
    print(x)
for x in df.iterrows():
    import pdb; pdb.set_trace()
    x
x
x.value_1
x
type(x)
x
x[0]
x[1]
x[2]
x[1]
type(x[1])
x[1]
x[1].value_1
q
for index, row in df.iterrows():
    tuple_values = (row.value_1, row.value_2)
tuple_values
for index, row in df.iterrows():
    tuple_values = (row.value_1, row.value_2)
    print(tuple_values)
exit
import pylint
base_dir = os.path.dirname(os.path.realpath(__file__))
base_dir = '.'
file_path = os.path.join(base_dir, "multiplication_15values.xlsx")
import os
file_path = os.path.join(base_dir, "multiplication_15values.xlsx")
file_path
df = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
import pd
df = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
import pandas as pd
df = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
base_dir = '.'
file_path = os.path.join(base_dir, "input_excel_files", filename)
import os
file_path = os.path.join(base_dir, "input_excel_files", filename)
filename = "division_1000values.xlsx"
file_path = os.path.join(base_dir, "input_excel_files", filename)
file_path
import pandas as pd
df = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
df.iloc[1]
df.loc[0]
df.value_1[0]
df.value_2[0]
df.iloc[0] - df.result[0]
import os
import pandas as pd
base_dir = '.'
filename = "division_1000values.xlsx"
file_path = os.path.join(base_dir, "input_excel_files", filename)
df = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
tuple_values = df_values.value_1[0], df_values.value_2[0]
tuple_values = df.value_1[0], df.value_2[0]
tuple_values
tuple_values = df.value_1[1], df.value_2[1]
tuple_values
base_dir = '.'
filename = "division_1000values.xlsx"
import os
import pandas as pd
file_path = os.path.join(base_dir, "input_excel_files", filename)
df_data = pd.read_excel(io=file_path, index_col=None,
                           names=["value_1", "value_2", "result"], dtype='float')
filename= "division_15values.xlsx"
file_path = os.path.join(base_dir, "input_excel_files", filename)
file_path
df_data = pd.read_excel(io=file_path, index_col=None,names=["value_1", "value_2", "result"], dtype='float')
2.0/0
base_dir = '.'
import os
import pandas
filename = "addition_1000values.xlsx"
file_path = os.path.join(base_dir, "input_excel_files", file_name)
file_path = os.path.join(base_dir, "input_excel_files", filename)
df_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
import pandas as pd
df_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
file_path = os.path.join(base_dir, "/tests/input_excel_files", filename)
df_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
base_dir = '.'
filename = "addition_1000values.xlsx"
file_path = os.path.join(base_dir, "/tests/input_excel_files", filename)
df_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
file_path
base_dir = os.path.dirname(os.path.abspath(__file__))
import os
file_path = os.path.join("/home/myuser/tests/input_excel_files", "input_excel_files", filename)
filename = "addition_1000values.xlsx"
file_path = os.path.join("/home/myuser/tests/input_excel_files",  filename)
file_path
from tests.panda_extract_data import PandaExtractData
import pandas as df
import pandas as pd
df_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
df_data
exit
base_dir = '.'
file_name = "subtraction_1000values.xlsx"
file_path = os.path.join(base_dir, "input_excel_files", file_name)
import os
file_path = os.path.join(base_dir, "input_excel_files", file_name)
file_path
df_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
import pandas as pd
df_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
df_data
base_dir = os.path.dirname(os.path.realpath(__file__))
__file__
print(__file__)
import os
os.getcwd()
os.path.exists("/home/myuser/tests")
import InputValidator
from utils.input_validator import InputValidator
InputValidator(1,2).validate()
is_3 = False
is_4 = False
is_3 = 3 == 4
is_3
is_3 = 3 == 3
is_3
import FileWriter
ls
cd ls
ls
import FileWriter
import file_writer
import file_writer.py
import FileWriter
from utils import FileWriter
from .utils import FileWriter
from calc.utils.file_writer import FileWriter
import numpy
from calc.utils.file_writer import FileWriter
import pandas as pd
pip install pandas
import pandas as pd
from calc.utils.file_writer import FileWriter
uninstall numpy
import pandas as pd
apt-get install musl-dev
apt update && apt install -y gcc musl-dev make
sudo apt update && apt install -y gcc musl-dev make
ln -s /usr/lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so.1
ln -s /usr/lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so
class FileWriter:
    """File writer to csv class"""
    def __init__(self, user_input):
        self._user_input = user_input
    @property
    def input_value1(self):
        return self._user_input
    def write_to_file(self):
        """Method to write users input data to csv file"""
        # base_dir = os.path.dirname(os.path.abspath(__file__))
        # file_path = os.path.join(base_dir, "../../tests/input_excel_files", self.file_name)
        df_data = pd.DataFrame([self._user_input], columns=['value1', 'value2', 'operation'], dtype='float')
        df_csv_data = df_data.to_csv('input.csv', index=False, sep=',')
        # df_csv_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
        return df_csv_data
def write_to_file(self):
    """Method to write users input data to csv file"""
    # base_dir = os.path.dirname(os.path.abspath(__file__))
    # file_path = os.path.join(base_dir, "../../tests/input_excel_files", self.file_name)
    df_data = pd.DataFrame([self._user_input], columns=['value1', 'value2', 'operation'], dtype='float')
    df_csv_data = df_data.to_csv('input.csv', index=False, sep=',')
    # df_csv_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
    return df_csv_data
user_input = ('1', '2', 'Addition')
 FileWriter(user_input).write_to_file()
FileWriter(user_input).write_to_file()
class FileWriter:
    """File writer to csv class"""
    def __init__(self, user_input):
        self._user_input = user_input
    @property
    def input_value1(self):
        return self._user_input
    def write_to_file(self):
        """Method to write users input data to csv file"""
        # base_dir = os.path.dirname(os.path.abspath(__file__))
        # file_path = os.path.join(base_dir, "../../tests/input_excel_files", self.file_name)
        df_data = pd.DataFrame([self._user_input], columns=['value1', 'value2', 'operation'], dtype='float')
        df_csv_data = df_data.to_csv('input.csv', index=False, sep=',')
        # df_csv_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
        return df_csv_data
class FileWriter:
    """File writer to csv class"""
    def __init__(self, user_input):
        self._user_input = user_input
    @property
    def input_value1(self):
        return self._user_input
    def write_to_file(self):
        """Method to write users input data to csv file"""
        # base_dir = os.path.dirname(os.path.abspath(__file__))
        # file_path = os.path.join(base_dir, "../../tests/input_excel_files", self.file_name)
        df_data = pd.DataFrame([self._user_input], columns=['value1', 'value2', 'operation'], dtype='float')
        df_csv_data = df_data.to_csv('input.csv', index=False, sep=',')
        # df_csv_data = pd.read_excel(io=file_path, index_col=None, names=["value_1", "value_2", "result"], dtype='float')
        return df_csv_data
class FileWriter:
    """File writer to csv class"""
    def __init__(self, user_input):
        self._user_input = user_input
    @property
    def input_value1(self):
        return self._user_input
    def write_to_file(self):
        """Method to write users input data to csv file"""
        df_data = pd.DataFrame([self._user_input], 
        columns=['value1', 'value2', 'operation'], dtype='float')
        df_csv_data = df_data.to_csv('input.csv', index=False, sep=',')
        return df_csv_data
def write_to_file(values):
"""Method to write users input data to csv file"""
    df_data = pd.DataFrame([user_input], 
    columns=['value1', 'value2', 'operation'], dtype='float')
    df_csv_data = df_data.to_csv('input.csv', index=False, sep=',')
    return df_csv_data
def write_to_file(values):
"""Method to write users input data to csv file"""
    df_data = pd.DataFrame([user_input], 
    columns=['value1', 'value2', 'operation'], dtype='float')
    df_csv_data = df_data.to_csv('input.csv', index=False, sep=',')
    return df_csv_data
def write_to_file(values):
"""Method to write users input data to csv file"""
    df_data = pd.DataFrame([values], 
    columns=['value1', 'value2', 'operation'], dtype='float')
    df_csv_data = df_data.to_csv('input.csv', index=False, sep=',')
    return df_csv_data
def write_to_file(values):
    df_data = pd.DataFrame([values],
    columns=['value1', 'value2', 'operation'], dtype='float')
    df_csv_data = df_data.to_csv('input.csv', index=False, sep=',')
    return df_csv_data
values = (1,2, Addition)
values = (1, 2, Addition)
values = ('1',' 2', 'Addition')
write_to_file(values)
import pandas as pd
